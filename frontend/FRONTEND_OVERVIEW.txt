PROJECT: Portfolio Frontend

OVERVIEW
A modern, responsive portfolio built with Next.js (App Router) and Tailwind CSS. It showcases projects, skills, blog, and a contact workflow with smooth animations and strong SEO.

TECH STACK
- Framework: Next.js 15, React 19
- Styling: Tailwind CSS 4, Tailwind plugins
- Animations: Framer Motion
- Forms: React Hook Form
- Icons: lucide-react, @tabler/icons-react
- SEO: next-sitemap (build-time sitemap generation)
- Analytics: (optional) @vercel/analytics (currently not referenced)
- Utilities: clsx, tailwind-merge, qss, jwt-decode
- 3D/Graphics: Three.js (used by Vanta background if enabled)

RUNTIME REQUIREMENTS
- Node 18+ recommended (Next.js 15 compatible)
- Scripts: npm

AVAILABLE NPM SCRIPTS
- dev: Start development server (next dev)
- build: Production build (next build)
- start: Start production server (next start)
- lint: Run ESLint
- postbuild: Generate sitemap using next-sitemap
- vercel-build: Install with legacy peer deps + next build (for Vercel CI)

APP STRUCTURE (HIGH-LEVEL)
- app/
  - page.js (Landing/Homepage)
  - Homepage.js (home composition)
  - about/
    - page.js, AboutHero.js, EducationSection.js, CertificationSection.js
  - projects/
    - page.js, ProjectsHero.js, ProjectsGrid.js, ProjectGridMobile.js
  - blog/
    - page.js, [slug]/page.js (post route)
  - contact/
    - page.js, ContactForm.js, ContactHero.js, ContactInfo.js
  - work-with-me/
    - page.js, WorkHero.js, ServicesSection.js, ProcessSection.js
  - admin/
    - page.js, admin.js, Project.js, ContactResponse.js, Notepad.js
  - login/
    - page.js, login.js, oAuth.js
  - Register/
    - page.js
  - lib/
    - auth.js (jwt cookie helpers), blog.js (blog utilities)
  - layout.js, globals.css
- components/
  - Header.js, Footer.js, DarkModeToggle.js
  - HeroSection.js, HeroSectionMobile.js
  - InteractiveSkillsDisplay.js (interactive skill grid)
  - useIsMobile.js

KEY FEATURES & FUNCTIONALITIES
- Responsive UI: Mobile-first layout with adaptive sections
- Animated UI: Motion-based transitions and reveals (Framer Motion)
- Skills Showcase: Interactive skills grid with click-to-expand detail cards
- Projects Gallery: Responsive projects listing (desktop/mobile components)
- Blog: Dynamic routing for posts under app/blog/[slug]
- Contact Form: Client-side validation via react-hook-form; server integration ready
- Auth Helpers: JWT decode utils in app/lib/auth.js
- Admin Area: Tools under /admin (guard-ready via middleware)
- Dark Mode: Toggle component present (storage strategy determined in component)
- SEO: next-sitemap generates sitemap on postbuild

MIDDLEWARE
- middleware.js: Active only for routes matching /admin/:path*
  - Currently pass-through (NextResponse.next())
  - Recommended: cookie-based auth guard (check a session cookie and redirect to /login)

VANTA BACKGROUND (OPTIONAL)
- If enabled, prefer dynamic client-only imports in useEffect and destroy on cleanup to prevent hydration warnings and duplicate three instances.
- Use three only for Vanta; avoid importing three elsewhere to prevent multiple instances.

NOTABLE MODULE USAGE
- framer-motion: Hero, About, Projects, Contact sections
- react-hook-form: app/contact/ContactForm.js, app/admin/Project.js
- lucide-react: Blog pages, About sections
- @tabler/icons-react: Navigation, OAuth buttons, animated projects
- three: imported in several pages for visual effects/Vanta background
- jwt-decode: app/lib/auth.js (token parsing)
- clsx: app/lib/util.js (class merging)
- tailwind-merge: app/lib/util.js (Tailwind class merge)
- qss: components/ui/linkpreview.js (query string encoding)

ADMIN AREA
- Routes: /admin/*
- Components: admin.js, Project.js, ContactResponse.js, Notepad.js
- Guard: Add cookie-based middleware check to restrict access

ESLINT & CONFIG
- ESLint configured via eslint.config.mjs
- jsconfig.json: path alias '@/'; types disabled and lib checks skipped to avoid implicit type pickup

PUBLIC ASSETS (selected)
- Various .glb and images (not used for model-viewer by default)
- PDF certificates, icons, logos

NOTES & BEST PRACTICES
- Prefer client-only dynamic imports for browser-only libraries (e.g., Vanta/three)
- Avoid window checks that cause SSR/client divergence; instead, guard via dynamic import in useEffect
- Keep sitemap up-to-date via postbuild
- Use cookie-based auth for middleware; avoid localStorage at the edge

GETTING STARTED
1) npm install
2) npm run dev
3) Visit http://localhost:3000

BUILD & DEPLOY
- Production build: npm run build
- Start: npm start
- Vercel: vercel-build script handles install + build

TROUBLESHOOTING
- Hydration mismatch: Remove SSR-time browser-only logic; use useEffect
- Multiple three instances: ensure three is not imported in multiple conflicting ways and avoid CDN scripts
- Locked node_modules on Windows: close Node processes, then npx rimraf node_modules package-lock.json and npm install